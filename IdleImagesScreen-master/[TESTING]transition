package Convert;
import java.awt.AlphaComposite;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;


    public class FadeImage extends JPanel {

        public static final long RUNNING_TIME = 2000;

        private BufferedImage inImage;
        private BufferedImage outImage;

        private float alpha = 0f;
       

        public FadeImage(BufferedImage first, BufferedImage next) {
            	alpha=0f;
                inImage = first;
                outImage = next;
        }
        public void startfade(BufferedImage next){
               
                inImage=outImage;
                outImage=next;
                
                FastGameTimer g=new FastGameTimer(4);
                
                while(true) {
                	
                	if(g.getTimeRemaining()<=0) {
                		break;
                	}
                	else {
                    	double duration = 4-g.getTimeRemaining();
                        
                            alpha =  (float) (g.getTimeRemaining()/4);
                        
                        repaint();
                    }
        
                }
          
            
        
        }
       @Override
        public Dimension getPreferredSize() {
            return new Dimension(
                            Math.max(inImage.getWidth(), outImage.getWidth()), 
                            Math.max(inImage.getHeight(), outImage.getHeight()));
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setComposite(AlphaComposite.SrcOver.derive(alpha));
            int x = (getWidth() - inImage.getWidth()) / 2;
            int y = (getHeight() - inImage.getHeight()) / 2;
            g2d.drawImage(inImage, x, y, this);

            g2d.setComposite(AlphaComposite.SrcOver.derive(1f - alpha));
            x = (getWidth() - outImage.getWidth()) / 2;
            y = (getHeight() - outImage.getHeight()) / 2;
            g2d.drawImage(outImage, x, y, this);
            g2d.dispose();
        }

    
}





















package Convert;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
   Displays the current time once every second.
 */
public class FastGameTimer
{
	private Timer t;
	private long timeRemaining;
	private long startingTime;
	private final int DELAY = 100; // milliseconds between timer ticks
	
	public FastGameTimer(int startTime) {
		timeRemaining = startTime;
		startingTime=startTime;
		class CurrentTime implements ActionListener
		{
			public void actionPerformed(ActionEvent event)
			{
				timeRemaining--;
				if(timeRemaining <= 0) {
					t.stop();
				}
			}
		}
		CurrentTime listener = new CurrentTime();
		t = new Timer(DELAY, listener);
		t.start();
	}
	
	/**
	 * 
	 * @return The number of seconds remaining
	 */
	public double getTimeRemaining() {
		return timeRemaining;
	}
	public double getStartingTime() {
		return startingTime;
	}
}





























package Convert;
import java.io.File;
import java.util.ArrayList;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

public class IdleScreen extends JFrame implements MouseListener{
	private boolean isRunning = true;
	
	public IdleScreen(){
	isRunning=true;	
	}
	public void startidlescreen() throws IOException{
		
        //Initialize storage and access of images to be used in screensaver
		String folderpath = "images";
	 File dir = new File(folderpath);
	    File[] directoryListing = dir.listFiles();
	    ArrayList<BufferedImage> pics = new ArrayList<BufferedImage>(0);
	    
	    
	    //Dimension of screen
	    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	   
	    	
	    	
	  //Preparation of the Imaging
	    JFrame f = new JFrame();
	    f.setSize((int)screenSize.getWidth(), (int)screenSize.getHeight());
	    JLabel label = new JLabel(new ImageIcon(ImageIO.read(directoryListing[0])));
//	    f.getContentPane().add(label);
	    FadeImage hi = new FadeImage(ImageIO.read(directoryListing[0]), ImageIO.read(directoryListing[1]));
	   f.add(hi);
	    label.addMouseListener(this);
	    f.setUndecorated(true);
	  //Endless iteration through the images
	    	for(int i=0;i<directoryListing.length;i=(i+1)%directoryListing.length) {
	    		
	    	
	    	if(pics.size()==0) {
	    		pics.add(ImageIO.read(directoryListing[0]));
	    	}
	    	
	    	 //Change image
	    	//label.setIcon(new ImageIcon(resize(pics.get(i), (int)screenSize.getHeight(),(int)screenSize.getWidth() )));
	    	f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    	f.setVisible(true);

	    	//Stays in loop, downloads next image, until timer runs out
	    	GameTimer g = new GameTimer(2);
	    	boolean donedownloading= false;
	    	while(true) {
	    		System.out.print("");
	    		
	    		//Concurrent image loading
	    		if(pics.size() < directoryListing.length && !donedownloading) {
		    		pics.add(ImageIO.read(directoryListing[(i+1)%directoryListing.length]));
		    		donedownloading=true;
	    		}
	    		if(!isRunning) {
	    			
	    			
	    			f.dispose();
		    		return;
	    		}
		    	else if(g.getTimeRemaining()<=0) {
	    			break;
	    		}
	    		
	    	}
	    	hi.startfade(pics.get(i%2));
	    	
	    
	    	
	    	
	    	
	    	}
	    
}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		isRunning=false;
	
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		isRunning=false;
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	private static BufferedImage resize(BufferedImage img, int height, int width) {
        Image tmp = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        BufferedImage resized = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = resized.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();
        return resized;
    }
	//METHOD TESTING
 	public static void main(String[] args) {
 		IdleScreen r = new IdleScreen();
 		try {
 			r.startidlescreen();
 		} catch (IOException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
 	}
}
